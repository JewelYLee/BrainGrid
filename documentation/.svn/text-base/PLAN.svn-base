Recent progress:
-

CUDA ISSUES:
- How do we plan to track spike events?  We will need to dynamically allocate memory for each neuron
	to record events, in a similar fashion to the c-style neuron code.
+ How will we notify synapses of spikes?
	- a global memory area for kernels to write spike events to?
								or
	- a local (to the block) memory area for kernels to write events to?
		1) upon spiking event, write the pair of outgoing synapses indices (begin, end) into global mem
		2) after all neurons have been advanced, notify synapses of spiking events
	- this raises an issue:
		when copying the cstyle neurons into device memory, we need to remap their pointers
		to their outgoing synapse arrays.
+ RNG: how will we calculate noise?
	- 	Each kernel could calculate their own rng.  This would require that each kernel somehow
		has a unique seed.  We could use the tid to accomplish this.
								or
	-   Before each time step, we can compute a random number for each neuron and actually
		store this number in the neuron struct.  When the number is needed, we just look it up.

STANDING QUESTIONS:
1) can we get a thread-safe random number generator?

CURRENT BUGS:

OPTIMIZATION:
1) 	Currently, ~40% of the run time is spent generating p-rngs:
	Perhaps we could try a multiply-with-carry	style rng instead.  Also, we could try a
	multi-threaded approach, either with a thread-safe rng - or - with a dedicated rng
	thread.  The thread-safe rng approach is more scalable.


CUDA development
0) copy data structures to C style data structures
1a) copy C style data structures from host to device
1b) copy C style data structures from device back to host 
2) convert c-style advance functions into kernels
3) organize threads to perform advance() work


OVERALL PLAN:
1)	Build single neuron model 
   	- COMPLETE 
2) 	Build grid of neurons
   	- COMPLETE 
3) 	Model synapses
	- COMPLETE
4) 	Model growth
	- COMPLETE
5) 	Write documentation
	- IN PROGRESS
6a)	Validate 
	- COMPLETE
6b)	Different architectures... 
	- IN PROGRESS
7) 	Optimize
	- COMPLETE
8) 	Write fcns. to copy data from classes into arrays of structs for consumption by 
   	the cuda c compiler. 
	- COMPLETE
9) 	Write C style functions to advance the network.  There shouldn't need to be
   	many modifications to the existing code in Network, DynamicSpikingSynapse and LifNeuron.
   	- COMPLETE
10)	Verify same results as normal advance
	- COMPLETE
11) Write code to copy the necessary simulation data onto the gpu.
12) Write code to copy the simulation data from the gpu back into the simulator
13) Convert the C style functions into kernels.
14) Document
15) Verify same results as normal CPU advance

